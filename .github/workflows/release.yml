name: Release

on:
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build:
          - linux musl x64
          - linux musl aarch64
          - macos x64
          - macos aarch64
          - pc windows msvc x64
        include:
          - build: linux musl x64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            cargo: cargo
          - build: linux musl aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            cargo: cross
          - build: macos x64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cargo: cargo
          - build: macos aarch64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            cargo: cargo
          - build: pc windows msvc x64
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            cargo: cargo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        if: matrix.cargo == 'cross'
        shell: bash
        run: |
          # In the past, new releases of 'cross' have broken CI. So for now, we
          # pin it. We also use their pre-compiled binary releases because cross
          # has over 100 dependencies and takes a bit to compile.
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz

      - name: Install musl-tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y --no-install-recommends musl-tools
        
      # Workaround for <https://github.com/actions/virtual-environments/issues/2557>
      - name: Switch Xcode SDK
        if: runner.os == 'macos'
        run: |
          cat <<EOF >> "$GITHUB_ENV"
          SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
          EOF

      - name: Build release binary
        run: |
          ${{ matrix.cargo }} build --verbose --release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/obs-countdown.exe"
          else
            bin="target/${{ matrix.target }}/release/obs-countdown"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: List build artifacts
        run: ls -R target/

      - name: Create checksum
        id: make-checksum
        working-directory: ./target/${{ matrix.target }}/release
        run: |
          name="obs-countdown-${{ matrix.target }}.sha256sum"
          if [[ "$RUNNER_OS" != "macOS" ]]; then
            sha256sum "obs-countdown" > "${name}"
          else
            shasum -a 256 "obs-countdown" > "${name}"
          fi
          echo "::set-output name=name::${name}"

      - name: Tar release
        id: make-artifact
        working-directory: ./target/${{ matrix.target }}/release
        run: |
          name="obs-countdown-${{ matrix.target }}.tar.gz"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            tar cvzf "${name}" "obs-countdown.exe"
          else
            tar cvzf "${name}" "obs-countdown"
          fi
          echo "::set-output name=name::${name}"

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: ./target/${{ matrix.target }}/release/${{ steps.make-artifact.outputs.name }}
          asset_name: obs-countdown-${{matrix.target}}.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1.0.2
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }} 
          asset_path: ./target/${{ matrix.target }}/release/${{ steps.make-checksum.outputs.name }}
          asset_name: obs-countdown-${{matrix.target}}.sha256sum
          asset_content_type: text/plain